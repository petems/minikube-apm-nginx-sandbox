apiVersion: v1
data:
  nginx.conf: |
    # Load nginx-datadog module for enabling Datadog APM Traces for proxy
    load_module /usr/lib/nginx/modules/ngx_http_datadog_module.so;

    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;

    events {
        worker_connections  1024;
    }

    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        
        # ref. https://docs.datadoghq.com/integrations/nginx/?tab=host#log-collection
        log_format main_datadog '$remote_addr - $remote_user [$time_local] "$request" '
                               '$status $body_bytes_sent $request_time '
                               '"$http_referer" "$http_user_agent" "$http_x_forwarded_for" '
                               'dd.trace_id="$datadog_trace_id" dd.span_id="$datadog_span_id"';
        
        # Keep original format as backup
        log_format main '$remote_addr - $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent $request_time '
                      '"$http_referer" "$http_user_agent" "$http_x_forwarded_for"';
        
        access_log  /var/log/nginx/access.log main_datadog;
        sendfile        on;
        keepalive_timeout  65;

        # Reverse proxy configuration
        server {
            listen       80;
            server_name  localhost;

            # Route golang-api requests to golang-api service
            location /golang-api/ {
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                # Forward Datadog trace context headers for distributed tracing
                proxy_set_header X-Datadog-Trace-Id $datadog_trace_id;
                proxy_set_header X-Datadog-Parent-Id $datadog_span_id;
                proxy_set_header X-Datadog-Sampling-Priority "1";
                # Remove /golang-api prefix when forwarding to backend
                rewrite ^/golang-api/(.*) /$1 break;
                proxy_pass http://golang-api:8080;
            }

            # Route nodejs-api requests to nodejs-api service
            location /nodejs-api/ {
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                # Forward Datadog trace context headers for distributed tracing
                proxy_set_header X-Datadog-Trace-Id $datadog_trace_id;
                proxy_set_header X-Datadog-Parent-Id $datadog_span_id;
                proxy_set_header X-Datadog-Sampling-Priority "1";
                # Remove /nodejs-api prefix when forwarding to backend
                rewrite ^/nodejs-api/(.*) /$1 break;
                proxy_pass http://nodejs-api:3000;
            }

            # Default route for backward compatibility (routes to golang-api)
            location / {
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                # Forward Datadog trace context headers for distributed tracing
                proxy_set_header X-Datadog-Trace-Id $datadog_trace_id;
                proxy_set_header X-Datadog-Parent-Id $datadog_span_id;
                proxy_set_header X-Datadog-Sampling-Priority "1";
                proxy_pass http://golang-api:8080;
            }
        }

        # Enabling http_stub_status_module
        # so that dd-agent can collect nginx info
        # ref. https://docs.datadoghq.com/integrations/nginx/?tab=host#prepare-nginx
        server {
            listen 81;
            server_name _;
            access_log off;

            location /nginx_status {
                stub_status;
                server_tokens on;
            }

            # Health check for status server
            location /health {
                return 200 "nginx status server healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: nginx
  name: nginx-cm0
